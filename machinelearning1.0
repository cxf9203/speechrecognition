"""https://tensorflow.google.cn/tutorials/images/transfer_learning"""
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os
import tensorflow as tf

_URL = 'https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip'
path_to_zip = tf.keras.utils.get_file('cats_and_dogs.zip', origin=_URL, extract=True)
PATH = os.path.join(os.path.dirname(path_to_zip), 'cats_and_dogs_filtered')

train_dir = os.path.join(PATH, 'train')
print(train_dir)
validation_dir = os.path.join(PATH, 'validation')
print(validation_dir)
BATCH_SIZE = 32
IMG_SIZE = (160, 160)

image_generator = tf.keras.preprocessing.image.ImageDataGenerator(  featurewise_center=False, samplewise_center=False,
                                        featurewise_std_normalization=False, samplewise_std_normalization=False,
                                        zca_whitening=False, zca_epsilon=1e-06, rotation_range=0, width_shift_range=0.0,
                                        height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0,
                                        channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=False,
                                        vertical_flip=False, rescale=None, preprocessing_function=None,
                                        data_format=None, validation_split=0.2, dtype=None)
train_dataset = image_generator.flow_from_directory(directory=str(train_dir),
                                                     batch_size=BATCH_SIZE,
                                                     shuffle=True,
                                                     target_size=IMG_SIZE
                                                    )
validation_dataset = image_generator.flow_from_directory(directory=str(validation_dir),
                                                     batch_size=BATCH_SIZE,
                                                     shuffle=True,
                                                     target_size=IMG_SIZE
                                                         )




class_names = train_dataset.class_indices
print(train_dataset.class_indices)
"""
plt.figure(figsize=(10, 10))
for images, labels in train_dataset.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")
val_batches = tf.data.experimental.cardinality(validation_dataset)
test_dataset = validation_dataset.take(val_batches // 5)
validation_dataset = validation_dataset.skip(val_batches // 5)
print('Number of validation batches: %d' % tf.data.experimental.cardinality(validation_dataset))
print('Number of test batches: %d' % tf.data.experimental.cardinality(test_dataset))
"""
#AUTOTUNE = tf.data.AUTOTUNE

#train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)
#validation_dataset = validation_dataset.prefetch(buffer_size=AUTOTUNE)
#test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)




preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input

# Create the base model from the pre-trained model MobileNet V2

base_model = tf.keras.applications.MobileNetV2(input_shape=(160,160,3),include_top=False,
                                               weights='imagenet')


global_average_layer = tf.keras.layers.GlobalAveragePooling2D()
prediction_layer = tf.keras.layers.Dense(1)



#构建模型
inputs = tf.keras.Input(shape=(160, 160, 3))
#x=tf.keras.preprocessing.image.random_rotation(inputs,30)
#x=tf.keras.preprocessing.image.random_zoom(x,10)
x = preprocess_input(inputs)
x = base_model(x,training=0)
x = global_average_layer(x)
x = tf.keras.layers.Dropout(0.2)(x)
outputs = prediction_layer(x)
model = tf.keras.Model(inputs, outputs)
model.summary()
print(len(model.trainable_variables))
base_learning_rate = 0.0001
model.compile(optimizer=tf.keras.optimizers.Adam(lr=base_learning_rate),
              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              metrics=['accuracy'])

initial_epochs = 10

loss0, accuracy0 = model.evaluate(validation_dataset)
print("initial loss: {:.2f}".format(loss0))
print("initial accuracy: {:.2f}".format(accuracy0))
history = model.fit(train_dataset,
                    epochs=initial_epochs,
                    validation_data=validation_dataset)
